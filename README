This is the NOVA runtime environment (NRE).

NRE is supposed to be the successor of NUL (NOVA UserLand). It has the goal
to be much simpler and cleaner than NUL, because NUL is quite complicated and
difficult to maintain. This is achieved by providing easy-to-use abstractions,
using C++ exception handling and the well known pattern RAII.
Another important difference to NUL is that each service (typically a
component that would be a single or a group of host-drivers in NUL) runs in
its own protection domain to make it more reliable and reduce the dependencies
between them. Additionally, the architecture x86_64 (besides x86_32) is
supported from the beginning.


Getting started:
================

Please take the following steps:

1.  Go into the directory cross/.
2a. If you want to download a precompiled cross-compiler, execute the
    download.sh <arch>, where <arch> is either x86_32 or x86_64.
    It will download the compiler into /opt/nre-cross-<arch>. There are only
    precompiled versions for certain host platforms, of course.
2b. Otherwise, execute build.sh <arch>, where <arch> is either x86_32 or x86_64.
    This builds the cross compiler. Thus, it will take a few minutes :)
    Unfortunatly, the cross compiler does only compile with gcc < 4.7.
3.  Before you continue, choose the target and build-type that you want to use:
    export NRE_TARGET=(x86_32|x86_64) NRE_BUILD=(debug|release)
4.  Go into the directory nre. You'll find the convenience-script b, which is
    responsible for building everything that needs to be build and executing
    the specified command. So, simply do a "./b" to build everything. It will
    checkout and build NOVA, checkout and build the chainloader and - of course
    - build NRE as well. Please take a look at the very end of b to see the
    commands that are supported. For a quick start, use "./b qemu test" to run
    the test application in qemu.
5.  To use "./b srv <script>", you have to generate the novaboot-config by:
    ./tools/novaboot --dump-config > ~/.novaboot
    You might want to adjust it afterwards

Note that there are few boot-scripts that require additional binaries and
images. You can download them via ./dist/download.sh in the nre directory. They
will be put into dist/imgs/. You have to download quite a few MB and it will
probably get more over time, which is the reason it is not included in the
repo. Similarly, you have to invoke ./dist/build.sh to build a few test
harddisks and iso images first to be able to use a few boot scripts that
reference them.


Limitations:
============

Please note in general, that NRE is still a young project and a work in
progress. So, there will probably be bugs and a lot of missing features.
Additionally, don't expect that the API stays stable.

The following lists a few known issues and limitations that you might run into:
- The network models of vancouver have not been ported yet and a network service
  in NRE is missing as well.
- It is not possible yet to get direct access to a PCI device.
- The storage service of NRE supports ATAPI drives, but vancouver does not.
- When using the storage service on real hardware, DMA with ATA/ATAPI drives
  might be an issue. You can turn it off by adding the parameter "noidedma" to
  storage

