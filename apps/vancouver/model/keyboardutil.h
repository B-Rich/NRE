/*
 * (c) 2012 Nils Asmussen <nils@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 */

#pragma once

#include <services/Keyboard.h>

class KeyboardUtil {
public:
	/**
	 * Translate from scancode set2/3 to set1.
	 */
	static unsigned char translate_sc2_to_sc1(unsigned char scancode) {
		static const unsigned char map[128] = {
			0xff,0x43,0x41,0x3f,0x3d,0x3b,0x3c,0x58,0x64,0x44,0x42,0x40,0x3e,0x0f,0x29,0x59,
			0x65,0x38,0x2a,0x70,0x1d,0x10,0x02,0x5a,0x66,0x71,0x2c,0x1f,0x1e,0x11,0x03,0x5b,
			0x67,0x2e,0x2d,0x20,0x12,0x05,0x04,0x5c,0x68,0x39,0x2f,0x21,0x14,0x13,0x06,0x5d,
			0x69,0x31,0x30,0x23,0x22,0x15,0x07,0x5e,0x6a,0x72,0x32,0x24,0x16,0x08,0x09,0x5f,
			0x6b,0x33,0x25,0x17,0x18,0x0b,0x0a,0x60,0x6c,0x34,0x35,0x26,0x27,0x19,0x0c,0x61,
			0x6d,0x73,0x28,0x74,0x1a,0x0d,0x62,0x6e,0x3a,0x36,0x1c,0x1b,0x75,0x2b,0x63,0x76,
			0x55,0x56,0x77,0x78,0x79,0x7a,0x0e,0x7b,0x7c,0x4f,0x7d,0x4b,0x47,0x7e,0x7f,0x6f,
			0x52,0x53,0x50,0x4c,0x4d,0x48,0x01,0x45,0x57,0x4e,0x51,0x4a,0x37,0x49,0x46,0x54
		};
		switch(scancode) {
			case 0x00 ... 0x7f:
				return map[scancode];
			case 0x83:
				return 0x41; //F7
			case 0x84:
				return 0x54; //ALT+sysreq
			default:
				return scancode;
		}
	}

	  /**
	 * Translate from scancode set2 to set3.
	 */
	static unsigned char translate_sc2_to_sc3(unsigned scancode) {
		static const unsigned char map[133] = {
			0x00,0x47,0x00,0x27,0x17,0x07,0x0f,0x5e,0x00,0x4f,0x3f,0x2f,0x1f,0x0d,0x0e,0x00,
			0x00,0x19,0x12,0x00,0x11,0x15,0x16,0x00,0x00,0x00,0x1a,0x1b,0x1c,0x1d,0x1e,0x00,
			0x00,0x21,0x22,0x23,0x24,0x25,0x26,0x00,0x00,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x00,
			0x00,0x31,0x32,0x33,0x34,0x35,0x36,0x00,0x00,0x00,0x3a,0x3b,0x3c,0x3d,0x3e,0x00,
			0x00,0x41,0x42,0x43,0x44,0x45,0x46,0x00,0x00,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x00,
			0x00,0x00,0x52,0x00,0x54,0x55,0x00,0x00,0x14,0x59,0x5a,0x5b,0x00,0x5c,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x00,0x00,0x69,0x00,0x6b,0x6c,0x00,0x00,0x00,
			0x70,0x71,0x72,0x73,0x74,0x75,0x08,0x76,0x56,0x7c,0x7a,0x84,0x7e,0x7d,0x5f,0x00,
			0x00,0x00,0x00,0x37,0x57,
		};

		static const unsigned char emap[44] = {
			0x11,0x39,0x14,0x58,0x1f,0x8b,0x27,0x8c,0x2f,0x8d,0x37,0x00,0x3f,0x7f,0x4a,0x77,
			0x5a,0x79,0x5e,0x00,0x69,0x65,0x6b,0x61,0x6c,0x6e,0x70,0x67,0x71,0x64,0x72,0x60,
			0x74,0x6a,0x75,0x63,0x7a,0x6d,0x7c,0x57,0x7d,0x6f,0x7e,0x62,
		};

		unsigned char key = scancode;
		if((scancode & nre::Keyboard::EXTEND1) && key == 0x77)
			return 0x62;
		if(scancode & nre::Keyboard::EXTEND0) {
			for(unsigned i = 0; i < sizeof(emap); i += 2){
				if(emap[i * 2] == key)
					return emap[i * 2 + 1];
			}
		}
		return (key < sizeof(map)) ? map[key] : 0x00;
	}
};
