#!/bin/sh

# config
if [ -f /proc/cpuinfo ]; then
	cpus=`cat /proc/cpuinfo | grep '^processor[[:space:]]*:' | wc -l`
else
	cpus=1
fi
opts="-j$cpus"

# fall back to some reasonable defaults for the NRE environment variables
if [ -z "$NRE_TARGET" ]; then
	export NRE_TARGET=x86_64
fi
if [ "$NRE_BUILD" != "debug" ]; then
	export NRE_BUILD="release"
fi
if [ -z "$NRE_TFTPDIR" ]; then
	export NRE_TFTPDIR=/var/lib/tftpboot
fi
if [ -z "$NRE_GDB_X86_32" ]; then
	export NRE_GDB_X86_32=gdbtui
fi
if [ -z "$NRE_GDB_X86_64" ]; then
	export NRE_GDB_X86_64=x86_64-linux-gnu-gdbtui
fi

# target dependend values
if [ "$NRE_TARGET" = "x86_32" ]; then
	cross="i686-pc-nulnova"
	gdb=$NRE_GDB_X86_32
	export QEMU="qemu-system-i386"
	export QEMU_FLAGS="-cpu phenom "
elif [ "$NRE_TARGET" = "x86_64" ]; then
	cross="x86_64-pc-nulnova"
	gdb=$NRE_GDB_X86_64
	export QEMU="qemu-system-x86_64"
	export QEMU_FLAGS=""
else
	echo 'Please define $NRE_TARGET to x86_32 or x86_64!' >&2
	exit 1
fi

# don't change anything below!
crossdir="/opt/nre-cross-$NRE_TARGET"
build="build/$NRE_TARGET-$NRE_BUILD"
root=$(dirname $(readlink -f $0))
kerndir="../kernel"
novadir="../kernel/nova"
loaderdir="../loader"
morbodir="../loader/morbo"
bochscfg="bochs.cfg"

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "-?" ] ; then
	echo "Usage: $0 [<cmd> <arg>]"
	echo ""
	echo -n "This is a convenience script that is responsible for building everything (NOVA, morbo"
	echo -n " and NRE) and running the specified command afterwards. It does also support switching"
	echo -n " between debug and release builds by changing the Makefile of NOVA accordingly (adjust"
	echo -n " optimization level, ...). The most important environment variables that influence its"
	echo -n " behaviour are NRE_BUILD=(debug|release) and NRE_TARGET=(x86_32|x86_64)."
	echo ""
	echo ""
	echo "The following commands are available:"
	echo "    clean:                   do a clean in NOVA, morbo and NRE"
	echo "    bochs <bootscript>:      generate an ISO image for <bootscript> and run it"
	echo "                             in bochs"
	echo "    qemu <bootscript>:       run <bootscript> in qemu"
	echo "    qemunet:                 run qemu and boot from network"
	echo "    srv <bootscript>:        copy <bootscript> to the server specified in"
	echo "                             ~/.novaboot with a grub config"
	echo "    srvp <bootscript>:       copy <bootscript> to the server specified in"
	echo "                             ~/.novaboot with a pulsar config"
	echo "    dis=<prog>:              run objdump -SC <prog> (the cross-compiler version)"
	echo "    elf=<prog>:              run readelf -a <prog> (the cross-compiler version)"
	echo "    straddr=<prog> <str>:    search for the string <str> in <prog> and display"
	echo "                             the addresses"
	echo "    trace=<prog>:            start the backtrace script for <prog>"
	echo "    dbg=<prog> <bootscript>: run <bootscript> in qemu and remote-debug <prog>"
	echo "                             in gdb"
	echo "    dbgr <bootscript>:       run <bootscript> in qemu and wait"
	echo "    list:                    list the link-address of all programs"
	echo ""
	echo "Environment variables:"
	echo "    NRE_TARGET:              the target architecture. Either x86_32 or x86_64."
	echo "                             The default is x86_64."
	echo "    NRE_BUILD:               the build-type. Either debug or release. In debug"
	echo "                             mode optimizations are disabled, debug infos are"
	echo "                             available and assertions are active. In release"
	echo "                             mode all that is disabled. The default is release."
	echo "    NRE_TFTPDIR:             the directory of your tftp-server which is used for"
	echo "                             qemu network booting. The default is"
	echo "                             /var/lib/tftpboot."
	echo "    NRE_GDB_X86_32:          the executable of gdb to use for NRE_TARGET=x86_32."
	echo "                             The default is gdbtui."
	echo "    NRE_GDB_X86_64:          the executable of gdb to use for NRE_TARGET=x86_64."
	echo "                             The default is x86_64-linux-gnu-gdbtui."
	exit 0
fi

echo "Building for $NRE_TARGET in $NRE_BUILD mode using $cpus jobs..."

# build userland
scons $opts
if [ $? -ne 0 ]; then
	exit 1
fi

# checkout nova, if not already done
if [ ! -d "$novadir" ]; then
	$root/tools/checkout.sh $novadir `cat $kerndir/NOVA_URL` `cat $kerndir/NOVA_REVISION` nre-local \
		$root/$kerndir/patches/*
fi

cd $novadir/build
# adjust build-flags depending on build-type
if [ "`grep 'OFLAGS[[:space:]]*:=[[:space:]]*-O0' Makefile`" != "" ]; then
	if [ "$NRE_BUILD" != "debug" ]; then
		# it should be release, but isn't
		sed --in-place -e 's/OFLAGS[[:space:]]*:=[[:space:]]*-O0.*/OFLAGS\t\t:= -Os -g/' Makefile
	fi
else
	if [ "$NRE_BUILD" != "release" ]; then
		# it should be debug, but isn't
		sed --in-place -e 's/OFLAGS[[:space:]]*:=[[:space:]]*.*/OFLAGS\t\t:= -O0 -g -DDEBUG/' Makefile
	fi
fi
# build NOVA
ARCH=$NRE_TARGET make $jobs
if [ $? -ne 0 ]; then
	exit 1
fi
cp hypervisor-$NRE_TARGET $root/$build/bin/apps/hypervisor
cd $root

# checkout morbo, if not already done
if [ ! -d "$morbodir" ]; then
	$root/tools/checkout.sh $morbodir `cat $loaderdir/MORBO_URL` `cat $loaderdir/MORBO_REVISION` nre-local \
		$root/$loaderdir/patches/*
fi

# build morbo
cd $morbodir && scons $jobs
if [ $? -ne 0 ]; then
	exit 1
fi
cd $root
cp $morbodir/tftp/farnsworth $build/bin/apps/chainloader

# run the specified command, if any
case "$1" in
	clean)
		scons -c
		rm -Rf $novadir $morbodir
		;;
	prof=*)
		$build/tools/conv/conv i586 log.txt $build/bin/apps/${1#prof=} > result.xml
		;;
	bochs)
		mkdir -p $build/bin/boot/grub
		cp $root/dist/iso/boot/grub/stage2_eltorito $build/bin/boot/grub
		./tools/novaboot --build-dir="$PWD/$build" --iso -- $2
		filename=`basename $2`
		sed --in-place -e \
			's/\(ata.*\?:.*\?path\)=build\/[^\/]*\?\/\(.*\?\),/\1='`echo $build/ | sed -e 's/\//\\\\\//g'`'\2,/g' $bochscfg
		sed --in-place -e \
			's/^\(ata0-master:.*\?path\)=\(.*\?\),/\1='`echo $build/$filename.iso | sed -e 's/\//\\\\\//g'`',/' $bochscfg
		bochs -f $bochscfg -q
		;;
	qemu)
		./$2 --qemu="$QEMU" --qemu-append="$QEMU_FLAGS" --build-dir="$PWD/$build" | tee log.txt
		;;
	qemunet)
		$QEMU $QEMU_FLAGS -boot n -bootp pulsar -tftp $NRE_TFTPDIR
		;;
	srv)
		./$2 --server --build-dir="$PWD/$build"
		;;
	srvp)
		./$2 --server -p --build-dir="$PWD/$build"
		;;
	dis=*)
		$crossdir/bin/$cross-objdump -SC $build/bin/apps/${1#dis=} | less
		;;
	elf=*)
		$crossdir/bin/$cross-readelf -a $build/bin/apps/${1#elf=} | less
		;;
	straddr=*)
		# find base address of .rodata
		base=`$crossdir/bin/$cross-readelf -S $build/bin/apps/${1#straddr=} | grep .rodata | \
			xargs | cut -d ' ' -f 5`
		# grep for matching lines, prepare for better use of awk and finally add offset to base
		$crossdir/bin/$cross-readelf -p 4 $build/bin/apps/${1#straddr=} | grep $2 | \
			sed 's/^ *\[ *\([[:xdigit:]]*\)\] *\(.*\)$/0x\1 \2/' | \
			awk '{ printf("0x%x: %s %s %s %s %s %s\n",0x'$base' + strtonum($1),$2,$3,$4,$5,$6,$7) }'
		;;
	trace=*)
		tools/backtrace $build/bin/apps/${1#trace=}
		;;
	dbg=*)
		tmp=$(tempfile)
		echo "target remote localhost:1234" >> $tmp
		echo "display/i \$pc" >> $tmp
		# the problem is that qemu terminates if it receives SIGINT. so, if we want to
		# interrupt the execution and examine the state in gdb by pressing ^C, qemu
		# terminates. to prevent that we use a small program (ignoreint) no block SIGINT,
		# which replaces itself with the given program afterwards
		$build/tools/ignoreint/ignoreint ./$2 --qemu="$QEMU" \
			--build-dir="$PWD/$build" --qemu-append="$QEMU_FLAGS-S -s" > log.txt &
		$gdb $build/bin/apps/${1#dbg=} --command=$tmp
		rm -f $tmp
		kill `pgrep qemu` 2>/dev/null
		;;
	dbgr)
		./$2 --qemu="$QEMU" --build-dir="$PWD/$build" --qemu-append="$QEMU_FLAGS-S -s"
		;;
	list)
		ls -1 $build/bin/apps | while read l; do	
			$crossdir/bin/$cross-readelf -S $build/bin/apps/$l | \
				grep "\.init" | awk "{ printf(\"%12s: %s\n\",\"$l\",\$5) }"
		done
		;;
esac
